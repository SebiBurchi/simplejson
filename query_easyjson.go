// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package simplejson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson90b16446DecodeGithubComClambinSimplejsonV3(in *jlexer.Lexer, out *tableResponseColumn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComClambinSimplejsonV3(out *jwriter.Writer, in tableResponseColumn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tableResponseColumn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComClambinSimplejsonV3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tableResponseColumn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComClambinSimplejsonV3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tableResponseColumn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComClambinSimplejsonV3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tableResponseColumn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComClambinSimplejsonV3(l, v)
}
func easyjson90b16446DecodeGithubComClambinSimplejsonV31(in *jlexer.Lexer, out *tableResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "columns":
			if in.IsNull() {
				in.Skip()
				out.Columns = nil
			} else {
				in.Delim('[')
				if out.Columns == nil {
					if !in.IsDelim(']') {
						out.Columns = make([]tableResponseColumn, 0, 2)
					} else {
						out.Columns = []tableResponseColumn{}
					}
				} else {
					out.Columns = (out.Columns)[:0]
				}
				for !in.IsDelim(']') {
					var v1 tableResponseColumn
					(v1).UnmarshalEasyJSON(in)
					out.Columns = append(out.Columns, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rows":
			if in.IsNull() {
				in.Skip()
				out.Rows = nil
			} else {
				in.Delim('[')
				if out.Rows == nil {
					if !in.IsDelim(']') {
						out.Rows = make([]tableResponseRow, 0, 2)
					} else {
						out.Rows = []tableResponseRow{}
					}
				} else {
					out.Rows = (out.Rows)[:0]
				}
				for !in.IsDelim(']') {
					var v2 tableResponseRow
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						in.Delim('[')
						if v2 == nil {
							if !in.IsDelim(']') {
								v2 = make(tableResponseRow, 0, 4)
							} else {
								v2 = tableResponseRow{}
							}
						} else {
							v2 = (v2)[:0]
						}
						for !in.IsDelim(']') {
							var v3 interface{}
							if m, ok := v3.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v3.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v3 = in.Interface()
							}
							v2 = append(v2, v3)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Rows = append(out.Rows, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComClambinSimplejsonV31(out *jwriter.Writer, in tableResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"columns\":"
		out.RawString(prefix)
		if in.Columns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Columns {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"rows\":"
		out.RawString(prefix)
		if in.Rows == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Rows {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v8, v9 := range v7 {
						if v8 > 0 {
							out.RawByte(',')
						}
						if m, ok := v9.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v9.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v9))
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tableResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComClambinSimplejsonV31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tableResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComClambinSimplejsonV31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tableResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComClambinSimplejsonV31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tableResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComClambinSimplejsonV31(l, v)
}
func easyjson90b16446DecodeGithubComClambinSimplejsonV32(in *jlexer.Lexer, out *TimeSeriesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "target":
			out.Target = string(in.String())
		case "datapoints":
			if in.IsNull() {
				in.Skip()
				out.DataPoints = nil
			} else {
				in.Delim('[')
				if out.DataPoints == nil {
					if !in.IsDelim(']') {
						out.DataPoints = make([]DataPoint, 0, 2)
					} else {
						out.DataPoints = []DataPoint{}
					}
				} else {
					out.DataPoints = (out.DataPoints)[:0]
				}
				for !in.IsDelim(']') {
					var v10 DataPoint
					easyjson90b16446DecodeGithubComClambinSimplejsonV33(in, &v10)
					out.DataPoints = append(out.DataPoints, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComClambinSimplejsonV32(out *jwriter.Writer, in TimeSeriesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix[1:])
		out.String(string(in.Target))
	}
	{
		const prefix string = ",\"datapoints\":"
		out.RawString(prefix)
		if in.DataPoints == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.DataPoints {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Raw((v12).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TimeSeriesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComClambinSimplejsonV32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TimeSeriesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComClambinSimplejsonV32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TimeSeriesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComClambinSimplejsonV32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TimeSeriesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComClambinSimplejsonV32(l, v)
}
func easyjson90b16446DecodeGithubComClambinSimplejsonV33(in *jlexer.Lexer, out *DataPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "Value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComClambinSimplejsonV33(out *jwriter.Writer, in DataPoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix[1:])
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}
func easyjson90b16446DecodeGithubComClambinSimplejsonV34(in *jlexer.Lexer, out *Column) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Text":
			out.Text = string(in.String())
		case "Data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGithubComClambinSimplejsonV34(out *jwriter.Writer, in Column) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Column) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGithubComClambinSimplejsonV34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Column) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGithubComClambinSimplejsonV34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Column) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGithubComClambinSimplejsonV34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Column) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGithubComClambinSimplejsonV34(l, v)
}
